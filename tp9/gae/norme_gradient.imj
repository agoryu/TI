/// Cette macro calcul pour une image:
/// - le gradient x
/// - le gradient y
/// - les normes
/// - les angles
/// - les maximas locaux
///
/// Elliot VANEGUE
/// Gaëtan DEFLANDRE
macro "norme_gradient" {

	// Calcul de la norme du gradient par masque de Sobel
	//
	requires("1.41i");	// requis par substring(string, index)
	setBatchMode(true);

	sourceImage = getImageID();
	filename = getTitle();
	extension = "";
	if (lastIndexOf(filename, ".") > 0) {
		extension = substring(filename, lastIndexOf(filename, "."));
		filename = substring(filename, 0, lastIndexOf(filename, "."));
	}
	filenameGradX = filename+"_grad_x"+extension;
	filenameGradY = filename+"_grad_y"+extension;

	gradX = sobelX(sourceImage,filenameGradX);
	gradY = sobelY(sourceImage,filenameGradY);
	
	/****** Calcul de la norme du gradient ******/
	// récupération de la taille de l'image
	W = getWidth();
	H = getHeight();
	
	run("Duplicate...", "title=norme");
	to32bits();
	imgNorme = getImageID();
	run("Duplicate...", "title=rounded_direction");
	to32bits();
	imgDirection = getImageID();
	
	// Calculs pour chaque pixel de la norme et de l'angle
	// avec arroundi de l'angle
	for(y=0; y<H; y++) {
		for(x=0; x<W; x++) {
			norme = getNorme(x,y,gradX,gradY);
			selectImage(imgNorme);
			setPixel(x,y,norme);
			angle = getAngle(x,y,gradX,gradY);
			angle = roundAngle(angle);
			selectImage(imgDirection);
			setPixel(x,y,angle);
		}
	}
	
	selectImage(imgNorme);
	run("Duplicate...", "title=maxima_locaux");
	imgMaximaL = getImageID();

	//showaCruedHistogram();

	// Calculs des maxima locaux
	for(y=0; y<H; y++) {
		for(x=0; x<W; x++) {
			selectImage(imgDirection);
			angle = getPixel(x,y);
			findMaxima(imgNorme, imgMaximaL, x, y, W, H, angle);
		}
	}
	selectImage(imgMaximaL);
	to8bits();

	setBatchMode("exit and display");
}


// ------------------------------------------------------------
// FONCTIONS
// ------------------------------------------------------------


/// Passe l'image courante en 32 bits
function to32bits(){
	//changement taille image pour éviter les nombres négatifs
	run("Conversions...", " ");
	run("32-bit");
}

/// Passe l'image courante en 8 bits
function to8bits(){
	run("Conversions...", " ");
	run("8-bit");
}

/// Calcul du gradient x de l'image 'imgSource' (filtre de sobel en x)
/// retourne l'image du gratient x en 32 bit, nommé 'filename' 
function sobelX(imgSource, filename) {
	selectImage(imgSource);
	run("Duplicate...", "title="+filename);
	to32bits();
	run("Convolve...", "text1=[-1 0 1\n-2 0 2\n-1 0 1\n] normalize");
	return getImageID();
}

/// Calcul du gradient y de l'image 'imgSource' (filtre de sobel en y)
/// retourne l'image du gratient y en 32 bit, nommé 'filename' 
function sobelY(imgSource, filename) {
	selectImage(imgSource);
	run("Duplicate...", "title="+filename);
	to32bits();
	run("Convolve...", "text1=[-1 -2 -1\n0 0 0\n1 2 1\n] normalize");
	return getImageID();
}

/// retourne l'angle exacte en degré, opération de trigo
/// en fonction du gradient x 'sobelx' et gradient y 'sobely'
function getAngle(x, y, sobelx, sobely){
	selectImage(sobelx);
	dx = getPixel(x, y);
	selectImage(sobely);
	dy = getPixel(x, y);
	theta = atan2(dy,dx);
	return (theta/3.1415)*180;
}

/// retourne la norme exacte, théorème de pythagore
/// en fonction du gradient x 'sobelx' et gradient y 'sobely'
function getNorme(x, y, sobelx, sobely){
	selectImage(sobelx);
	dx = getPixel(x, y);
	selectImage(sobely);
	dy = getPixel(x, y);
	return sqrt( dx*dx + dy*dy );
}

/// retourne l'arrondi de l'angle en paramètre au multiple de 45° le plus proche.
function roundAngle(angle){
	// premiere etage pour evite les virgule 
	// pour ne pas gérer les cas >= et <=
	angle = round(angle);

	// deuxieme etage on arroundit pour les 8 direction
	if (angle > -22.5 && angle < 22.5){
		return 0;
	} else if (angle > 22.5  && angle < 67.5){
		return 45;
	} else if (angle > 67.5  && angle < 112.5){
		return 90;
	} else if (angle > 112.5 && angle < 157.5){
		return 135;
	} else if (angle > 157.5 || angle < -157.5){
		return 180;
	} else if (angle < -22.5 && angle > -67.5){
		return -45;
	} else if (angle < -67.5 && angle > -112.5){
		return -90;
	} else if (angle < -112.5 && angle > -157.5){
		return -135;
	}
}

/// Cherche les maximas lacaux et fix les non maxima à 0. 
function findMaxima(imgNorme, imgMaximaL, x, y, W, H, angle){

	// cas compliqué à gérer
	if (x==0 || x>=W-1 || y==0 || y>=H-1){
		return;
	}
	
	selectImage(imgNorme);
	p = getPixel(x, y);

	if(angle == 0 || angle == 180){
		p1 = getPixel(x-1, y);
		p2 = getPixel(x+1, y);
		if (abs(p) >= abs(p1) && abs(p)>abs(p2)){
			selectImage(imgMaximaL);
			setPixel(x-1, y, 0);
			setPixel(x+1, y, 0);
		}
	} else if (angle == 45 || angle == -135){
		p1 = getPixel(x-1, y-1);
		p2 = getPixel(x+1, y+1);
		if (abs(p) >= abs(p1) && abs(p)>abs(p2)){
			selectImage(imgMaximaL);
			setPixel(x-1, y-1, 0);
			setPixel(x+1, y+1, 0);
		}
	} else if (angle == 90 || angle == -90){
		p1 = getPixel(x, y-1);
		p2 = getPixel(x, y+1);
		if (abs(p) >= abs(p1) && abs(p)>abs(p2)){
			selectImage(imgMaximaL);
			setPixel(x, y-1, 0);
			setPixel(x, y+1, 0);
		}
	} else if (angle == 135 || angle == -45){
		p1 = getPixel(x-1, y+1);
		p2 = getPixel(x+1, y-1);
		if (abs(p) >= abs(p1) && abs(p)>abs(p2)){
			selectImage(imgMaximaL);
			setPixel(x-1, y+1, 0);
			setPixel(x+1, y-1, 0);
		}
	}
}

/// Affiche l'histogramme cumulé de l'image courante
function showCruedHistogram(){
	// Histogramme cumulé
	getRawStatistics(surf, moy, min, max, std, h); // h[0..255] <-> histo
	hc=newArray(256);
	hc[0]=h[0];
	for (i=1;i< h.length;i++) {
		hc[i] = hc[i-1]+h[i] ;
	}
	Plot.create("Histogramme cumulé de "+getTitle, "Niveau", "hc", hc);
	Plot.show();
}
